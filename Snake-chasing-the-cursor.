// copy any where in the html file inside the body
<script>
(function(){
  // Create a full-screen canvas on top of everything
  let canvas = document.createElement('canvas');
  canvas.id = 'snake-canvas';
  Object.assign(canvas.style, {
    position: 'fixed',
    left: 0,
    top: 0,
    width: '100vw',
    height: '100vh',
    zIndex: 999999,
    pointerEvents: 'none'
  });
  document.body.appendChild(canvas);

  let ctx = canvas.getContext('2d');
  let W = window.innerWidth, H = window.innerHeight;
  function resize() {
    W = window.innerWidth;
    H = window.innerHeight;
    canvas.width = W;
    canvas.height = H;
  }
  resize();
  window.addEventListener('resize', resize);

  // Mouse input
  const mouse = { x: W/2, y: H/2 };
  document.addEventListener('mousemove', e => {
    mouse.x = e.clientX;
    mouse.y = e.clientY;
  });

  // Snake parameters
  const SEGMENTS = 30;
  const SEG_LENGTH = 18;
  const HEAD_RADIUS = 14;
  const BODY_RADIUS = 10;

  // Color gradient
  function snakeColor(i, total) {
    // Blue to purple fade
    const t = i / total;
    const r = Math.round(40 + 120 * t);
    const g = Math.round(180 - 100 * t);
    const b = Math.round(255 - 100 * t);
    return `rgb(${r},${g},${b})`;
  }

  // Snake body: Array of {x, y}
  let snake = [];
  for (let i = 0; i < SEGMENTS; i++) {
    snake.push({ x: W/2, y: H/2 });
  }
  function lerp(a, b, t) { return a + (b - a) * t; }

  function animate() {
    // Move head towards mouse with some smoothing
    let head = snake[0];
    let dx = mouse.x - head.x;
    let dy = mouse.y - head.y;
    let angle = Math.atan2(dy, dx);
    const speed = 0.22;
    head.x = lerp(head.x, mouse.x, speed);
    head.y = lerp(head.y, mouse.y, speed);

    // Each segment follows the previous one
    for (let i = 1; i < snake.length; i++) {
      let prev = snake[i-1];
      let seg = snake[i];
      let dx = prev.x - seg.x;
      let dy = prev.y - seg.y;
      let dist = Math.sqrt(dx*dx + dy*dy);
      let desiredDist = SEG_LENGTH;

      if (dist > 1e-3) {
        // Move segment to maintain distance from prev
        let t = 1 - desiredDist / dist;
        seg.x = lerp(seg.x, prev.x, t);
        seg.y = lerp(seg.y, prev.y, t);
      }
    }

    // Draw
    ctx.clearRect(0, 0, W, H);

    // Draw shadow
    ctx.save();
    ctx.globalAlpha = 0.18;
    for (let i = 0; i < snake.length; i++) {
      let s = snake[i];
      ctx.beginPath();
      ctx.arc(s.x + 8, s.y + 12, i === 0 ? HEAD_RADIUS+3 : BODY_RADIUS+3, 0, 2*Math.PI);
      ctx.fillStyle = "#000";
      ctx.fill();
    }
    ctx.restore();

    // Draw body
    for (let i = snake.length - 1; i >= 0; i--) {
      let s = snake[i];
      ctx.beginPath();
      ctx.arc(s.x, s.y, i === 0 ? HEAD_RADIUS : BODY_RADIUS, 0, 2*Math.PI);
      ctx.fillStyle = snakeColor(i, snake.length);
      ctx.shadowColor = "rgba(0,0,0,0.25)";
      ctx.shadowBlur = i === 0 ? 15 : 6;
      ctx.fill();
      ctx.shadowBlur = 0;
    }

    // Draw eyes (on head)
    let headAngle = Math.atan2(mouse.y - snake[0].y, mouse.x - snake[0].x);
    let eyeOffsetAngle = Math.PI / 6;
    for (let d = -1; d <= 1; d += 2) {
      let ex = snake[0].x + Math.cos(headAngle + d * eyeOffsetAngle) * HEAD_RADIUS * 0.6;
      let ey = snake[0].y + Math.sin(headAngle + d * eyeOffsetAngle) * HEAD_RADIUS * 0.6;
      ctx.beginPath();
      ctx.arc(ex, ey, 2.7, 0, 2*Math.PI);
      ctx.fillStyle = "#fff";
      ctx.fill();
      ctx.beginPath();
      ctx.arc(ex + Math.cos(headAngle) * 2, ey + Math.sin(headAngle) * 2, 1.1, 0, 2*Math.PI);
      ctx.fillStyle = "#222";
      ctx.fill();
    }

    // Draw tongue (optional)
    ctx.save();
    ctx.strokeStyle = "#f66";
    ctx.lineWidth = 2;
    ctx.beginPath();
    let tx = snake[0].x + Math.cos(headAngle) * (HEAD_RADIUS + 5);
    let ty = snake[0].y + Math.sin(headAngle) * (HEAD_RADIUS + 5);
    ctx.moveTo(
      snake[0].x + Math.cos(headAngle) * (HEAD_RADIUS - 1),
      snake[0].y + Math.sin(headAngle) * (HEAD_RADIUS - 1)
    );
    ctx.lineTo(tx, ty);
    ctx.stroke();
    ctx.restore();

    requestAnimationFrame(animate);
  }
  animate();
})();
</script>
